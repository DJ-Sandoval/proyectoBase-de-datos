package view;


import controller.UsuarioDAO;
import model.TipoUsuario;
import model.Usuario;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.List;

/**
 * @author jose
 */
public class frmUsuarios extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(frmUsuarios.class.getName());
    private final UsuarioDAO usuarioDAO;

    /**
     * Creates new form frmUsuarios
     */
    public frmUsuarios() {
        initComponents();
        this.setTitle("Gestión de Usuarios");
        this.setLocationRelativeTo(null);
        usuarioDAO = new UsuarioDAO();
        cargarUsuarios(); // Cargar usuarios al iniciar
    }

    // Cargar usuarios en la tabla
    private void cargarUsuarios() {
        DefaultTableModel model = new DefaultTableModel(
                new Object[]{"ID", "Nombre", "Apellido", "Tipo Usuario", "Correo"},
                0
        );
        List<Usuario> usuarios = usuarioDAO.consultarUsuarios("nombre", ""); // Consultar todos
        for (Usuario usuario : usuarios) {
            model.addRow(new Object[]{
                    usuario.getIdUsuario(),
                    usuario.getNombre(),
                    usuario.getApellido(),
                    usuario.getTipoUsuario().getDescripcion(),
                    usuario.getCorreo()
            });
        }
        tbtUsuarios.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        tbtUsuarios = new javax.swing.JTable();
        btnRegistrar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbtUsuarios.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {},
                new String [] {"ID", "Nombre", "Apellido", "Tipo Usuario", "Correo"}
        ));
        jScrollPane1.setViewportView(tbtUsuarios);

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 14));
        jLabel1.setText("Apartado de Usuarios");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(42, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnRegistrar)
                                                .addGap(39, 39, 39)
                                                .addComponent(btnActualizar)
                                                .addGap(55, 55, 55)
                                                .addComponent(btnConsultar)
                                                .addGap(54, 54, 54)
                                                .addComponent(btnEliminar)
                                                .addGap(56, 56, 56))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(45, 45, 45))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(235, 235, 235))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnRegistrar)
                                        .addComponent(btnActualizar)
                                        .addComponent(btnConsultar)
                                        .addComponent(btnEliminar))
                                .addGap(68, 68, 68)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {
        // Abrir formulario para registrar usuario
        String nombre = JOptionPane.showInputDialog(this, "Nombre:");
        String apellido = JOptionPane.showInputDialog(this, "Apellido:");
        String correo = JOptionPane.showInputDialog(this, "Correo:");
        String tipoUsuarioStr = JOptionPane.showInputDialog(this, "ID Tipo Usuario (1: Estudiante, 2: Profesor):");

        if (nombre != null && apellido != null && correo != null && tipoUsuarioStr != null) {
            try {
                int idTipoUsuario = Integer.parseInt(tipoUsuarioStr);
                TipoUsuario tipoUsuario = new TipoUsuario(idTipoUsuario, idTipoUsuario == 1 ? "Estudiante" : "Profesor");
                Usuario usuario = new Usuario(0, nombre, apellido, tipoUsuario, correo);
                if (usuarioDAO.registrarUsuario(usuario)) {
                    JOptionPane.showMessageDialog(this, "Usuario registrado exitosamente");
                    cargarUsuarios();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al registrar usuario", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID de tipo de usuario inválido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tbtUsuarios.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un usuario para actualizar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idUsuario = (int) tbtUsuarios.getValueAt(selectedRow, 0);
        String nombre = JOptionPane.showInputDialog(this, "Nombre:", tbtUsuarios.getValueAt(selectedRow, 1));
        String apellido = JOptionPane.showInputDialog(this, "Apellido:", tbtUsuarios.getValueAt(selectedRow, 2));
        String correo = JOptionPane.showInputDialog(this, "Correo:", tbtUsuarios.getValueAt(selectedRow, 4));
        String tipoUsuarioStr = JOptionPane.showInputDialog(this, "ID Tipo Usuario (1: Estudiante, 2: Profesor):", tbtUsuarios.getValueAt(selectedRow, 3).equals("Estudiante") ? "1" : "2");

        if (nombre != null && apellido != null && correo != null && tipoUsuarioStr != null) {
            try {
                int idTipoUsuario = Integer.parseInt(tipoUsuarioStr);
                TipoUsuario tipoUsuario = new TipoUsuario(idTipoUsuario, idTipoUsuario == 1 ? "Estudiante" : "Profesor");
                Usuario usuario = new Usuario(idUsuario, nombre, apellido, tipoUsuario, correo);
                if (usuarioDAO.actualizarUsuario(usuario)) {
                    JOptionPane.showMessageDialog(this, "Usuario actualizado exitosamente");
                    cargarUsuarios();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al actualizar usuario", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID de tipo de usuario inválido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tbtUsuarios.getSelectedRow();
        if (selectedRow == -1) {
            // Consultar por criterio si no hay fila seleccionada
            String criterio = JOptionPane.showInputDialog(this, "Criterio (nombre, apellido, descripcion):");
            String valor = JOptionPane.showInputDialog(this, "Valor a buscar:");
            if (criterio != null && valor != null) {
                List<Usuario> usuarios = usuarioDAO.consultarUsuarios(criterio, valor);
                DefaultTableModel model = new DefaultTableModel(
                        new Object[]{"ID", "Nombre", "Apellido", "Tipo Usuario", "Correo"},
                        0
                );
                for (Usuario usuario : usuarios) {
                    model.addRow(new Object[]{
                            usuario.getIdUsuario(),
                            usuario.getNombre(),
                            usuario.getApellido(),
                            usuario.getTipoUsuario().getDescripcion(),
                            usuario.getCorreo()
                    });
                }
                tbtUsuarios.setModel(model);
            }
        } else {
            // Mostrar información del usuario seleccionado en un JOptionPane
            int idUsuario = (int) tbtUsuarios.getValueAt(selectedRow, 0);
            Usuario usuario = usuarioDAO.obtenerUsuarioPorId(idUsuario);
            if (usuario != null) {
                String info = String.format("ID: %d\nNombre: %s\nApellido: %s\nTipo: %s\nCorreo: %s",
                        usuario.getIdUsuario(),
                        usuario.getNombre(),
                        usuario.getApellido(),
                        usuario.getTipoUsuario().getDescripcion(),
                        usuario.getCorreo()
                );
                JOptionPane.showMessageDialog(this, info, "Información del Usuario", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error al obtener usuario", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tbtUsuarios.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un usuario para eliminar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idUsuario = (int) tbtUsuarios.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este usuario?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            if (usuarioDAO.eliminarUsuario(idUsuario)) {
                JOptionPane.showMessageDialog(this, "Usuario eliminado exitosamente");
                cargarUsuarios();
            } else {
                JOptionPane.showMessageDialog(this, "No se puede eliminar: el usuario tiene préstamos o reservas activas", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new frmUsuarios().setVisible(true));
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbtUsuarios;
    // End of variables declaration
}
