package view;
import controller.ReservaDAO;
import model.Reserva;
import model.Usuario;
import model.Libro;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JTable;

public class frmReserva extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(frmReserva.class.getName());
    private final ReservaDAO reservaDAO;

    public frmReserva() {
        initComponents();
        this.setTitle("Gestion de Reservas");
        this.setLocationRelativeTo(null);
        reservaDAO = new ReservaDAO();
        cargarReservas(); // Load reservations into the table on startup
    }

    // Load all reservations into the table
    private void cargarReservas() {
        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                new String[]{"ID Reserva", "ID Usuario", "Nombre Usuario", "ID Libro", "Título Libro", "Fecha Reserva"}
        );
        tbtReserva.setModel(model);
        List<Reserva> reservas = reservaDAO.consultarReservas();
        for (Reserva reserva : reservas) {
            try (java.sql.Connection conn = conection.Conexion.getConnection();
                 java.sql.PreparedStatement pstmt = conn.prepareStatement(
                         "SELECT u.nombre, u.apellido, l.titulo FROM Usuarios u, Libros l " +
                                 "WHERE u.id_usuario = ? AND l.ISBN = ?")) {
                pstmt.setInt(1, reserva.getIdUsuario());
                pstmt.setString(2, reserva.getISBN());
                try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        model.addRow(new Object[]{
                                reserva.getIdReserva(),
                                reserva.getIdUsuario(),
                                rs.getString("nombre") + " " + rs.getString("apellido"),
                                reserva.getISBN(),
                                rs.getString("titulo"),
                                reserva.getFechaReserva()
                        });
                    }
                }
            } catch (java.sql.SQLException e) {
                logger.log(java.util.logging.Level.SEVERE, "Error al cargar datos de reservas", e);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbtReserva = new javax.swing.JTable();
        btnRegistrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbtReserva.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null}
                },
                new String [] {
                        "ID Reserva", "ID Usuario", "Nombre Usuario", "ID Libro", "Título Libro", "Fecha Reserva"
                }
        ));
        jScrollPane1.setViewportView(tbtReserva);

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel1.setText("Apartado de Reservas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(211, 211, 211))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnRegistrar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnCancelar)
                                                .addGap(99, 99, 99)
                                                .addComponent(btnConsultar))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel1)
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnRegistrar)
                                        .addComponent(btnCancelar)
                                        .addComponent(btnConsultar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int selectedRow = tbtReserva.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una reserva para cancelar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idReserva = (int) tbtReserva.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea cancelar la reserva ID " + idReserva + "?", "Confirmar Cancelación", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            if (reservaDAO.cancelarReserva(idReserva)) {
                JOptionPane.showMessageDialog(this, "Reserva cancelada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cargarReservas(); // Refresh the table
            } else {
                JOptionPane.showMessageDialog(this, "Error al cancelar la reserva.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // Prompt user for input
            String idUsuarioStr = JOptionPane.showInputDialog(this, "Ingrese ID del usuario:");
            String ISBN = JOptionPane.showInputDialog(this, "Ingrese ISBN del libro:"); // Cambiado a ISBN

            if (idUsuarioStr == null || ISBN == null || idUsuarioStr.trim().isEmpty() || ISBN.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese datos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int idUsuario = Integer.parseInt(idUsuarioStr);

            // Check if the book is available
            if (reservaDAO.isLibroDisponible(ISBN)) { // Cambiado para pasar ISBN
                JOptionPane.showMessageDialog(this, "El libro está disponible, no es necesario reservarlo.", "Información", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Create reservation
            Reserva reserva = new Reserva();
            reserva.setIdUsuario(idUsuario);
            reserva.setISBN(ISBN); // Usar ISBN en lugar de idLibro
            reserva.setFechaReserva(new Date());

            if (reservaDAO.crearReserva(reserva)) {
                JOptionPane.showMessageDialog(this, "Reserva creada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cargarReservas(); // Refresh the table
            } else {
                JOptionPane.showMessageDialog(this, "Error al crear la reserva.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese datos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tbtReserva.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una reserva para consultar las reservas activas del usuario.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idUsuario = (int) tbtReserva.getValueAt(selectedRow, 1);

        // Create JDialog to show active reservations
        JDialog dialog = new JDialog(this, "Reservas Activas del Usuario ID: " + idUsuario, true);
        dialog.setSize(600, 400);
        dialog.setLocationRelativeTo(this);

        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                new String[]{"ID Reserva", "ISBN", "Título Libro", "Fecha Reserva"} // Cambiado a ISBN
        );
        JTable table = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table);
        dialog.add(scrollPane);

        // Load active reservations for the user
        List<Reserva> reservas = reservaDAO.consultarReservasActivas(idUsuario);
        for (Reserva reserva : reservas) {
            try (java.sql.Connection conn = conection.Conexion.getConnection();
                 java.sql.PreparedStatement pstmt = conn.prepareStatement("SELECT titulo FROM Libros WHERE ISBN = ?")) { // Cambiado a ISBN
                pstmt.setString(1, reserva.getISBN());
                try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        model.addRow(new Object[]{
                                reserva.getIdReserva(),
                                reserva.getISBN(), // Cambiado a ISBN
                                rs.getString("titulo"),
                                reserva.getFechaReserva()
                        });
                    }
                }
            } catch (java.sql.SQLException e) {
                logger.log(java.util.logging.Level.SEVERE, "Error al cargar reservas activas", e);
            }
        }

        dialog.setVisible(true);
    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(() -> new frmReserva().setVisible(true));
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbtReserva;
    // End of variables declaration
}
