package view;

import controller.PrestamoDAO;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import model.*;

/**
 *
 * @author jose
 */


/**
 *
 * @author jose
 */
public class frmPrestamos extends javax.swing.JFrame {

    private PrestamoDAO prestamoDAO;
    private DefaultTableModel tableModel;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(frmPrestamos.class.getName());

    /**
     * Creates new form frmPrestamos
     */
    public frmPrestamos() {
        initComponents();
        this.setTitle("Gestion de prestamos");
        this.setLocationRelativeTo(null);
        prestamoDAO = new PrestamoDAO();
        setupTable();
        loadPrestamosActivos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbtPrestamos = new javax.swing.JTable();
        btnRegistrar = new javax.swing.JButton();
        btnDevolucion = new javax.swing.JButton();
        btnPrestamosActivos = new javax.swing.JButton();
        btnHistorial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbtPrestamos.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String [] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jScrollPane1.setViewportView(tbtPrestamos);

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnDevolucion.setText("Devolucion");
        btnDevolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolucionActionPerformed(evt);
            }
        });

        btnPrestamosActivos.setText("Prestamos_Activos");
        btnPrestamosActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrestamosActivosActionPerformed(evt);
            }
        });

        btnHistorial.setText("Historial");
        btnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(btnRegistrar)
                                .addGap(43, 43, 43)
                                .addComponent(btnDevolucion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addComponent(btnPrestamosActivos)
                                .addGap(32, 32, 32)
                                .addComponent(btnHistorial)
                                .addGap(42, 42, 42))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnRegistrar)
                                        .addComponent(btnDevolucion)
                                        .addComponent(btnPrestamosActivos)
                                        .addComponent(btnHistorial))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        JDialog dialog = new JDialog(this, "Registrar Préstamo", true);
        dialog.setSize(400, 250);
        dialog.setLocationRelativeTo(this);

        GridBagLayout layout = new GridBagLayout();
        dialog.setLayout(layout);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JComboBox<String> cmbUsuario = new JComboBox<>(getUsuarios());
        JComboBox<String> cmbLibro = new JComboBox<>(getLibros());
        JTextField txtFechaPrestamo = new JTextField(new Date().toString(), 20);
        txtFechaPrestamo.setEnabled(false);

        gbc.gridx = 0;
        gbc.gridy = 0;
        dialog.add(new JLabel("Usuario:"), gbc);
        gbc.gridx = 1;
        dialog.add(cmbUsuario, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        dialog.add(new JLabel("Libro (ISBN):"), gbc);
        gbc.gridx = 1;
        dialog.add(cmbLibro, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        dialog.add(new JLabel("Fecha Préstamo:"), gbc);
        gbc.gridx = 1;
        dialog.add(txtFechaPrestamo, gbc);

        JButton btnSave = new JButton("Guardar");
        JButton btnCancel = new JButton("Cancelar");

        btnSave.addActionListener(e -> {
            try {
                if (cmbUsuario.getSelectedIndex() == -1 || cmbLibro.getSelectedIndex() == -1) {
                    JOptionPane.showMessageDialog(dialog, "Seleccione un usuario y un libro");
                    return;
                }

                Prestamo prestamo = new Prestamo();
                prestamo.setIdUsuario(getUsuariosIds()[cmbUsuario.getSelectedIndex()]);
                prestamo.setISBN(getLibrosIsbns()[cmbLibro.getSelectedIndex()]);
                prestamo.setFechaPrestamo(new Date());

                prestamoDAO.registrarPrestamo(prestamo);
                loadPrestamosActivos();
                dialog.dispose();
                JOptionPane.showMessageDialog(this, "Préstamo registrado exitosamente");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error al registrar préstamo: " + ex.getMessage());
            }
        });

        btnCancel.addActionListener(e -> dialog.dispose());

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        dialog.add(buttonPanel, gbc);

        dialog.setVisible(true);
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnDevolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolucionActionPerformed
        int selectedRow = tbtPrestamos.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un préstamo para registrar devolución");
            return;
        }

        int idPrestamo = (int) tableModel.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this,
                "¿Registrar devolución para el préstamo con ID " + idPrestamo + "?",
                "Confirmar Devolución",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                prestamoDAO.registrarDevolucion(idPrestamo);
                loadPrestamosActivos();
                JOptionPane.showMessageDialog(this, "Devolución registrada exitosamente");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al registrar devolución: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDevolucionActionPerformed

    private void btnPrestamosActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrestamosActivosActionPerformed
        JDialog dialog = new JDialog(this, "Préstamos Activos", true);
        dialog.setSize(800, 600);
        dialog.setLocationRelativeTo(this);

        // Crear tabla para mostrar los préstamos activos
        DefaultTableModel model = new DefaultTableModel(
                new Object[]{"ID Préstamo", "Usuario", "Libro", "Fecha Préstamo"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer la tabla no editable
            }
        };

        JTable table = new JTable(model);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scrollPane = new JScrollPane(table);

        // Ajustar ancho de columnas
        table.getColumnModel().getColumn(0).setPreferredWidth(80);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(2).setPreferredWidth(200);
        table.getColumnModel().getColumn(3).setPreferredWidth(150);

        // Botón para cerrar el diálogo
        JButton btnCerrar = new JButton("Cerrar");
        btnCerrar.addActionListener(e -> dialog.dispose());

        // Panel para organizar los componentes
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(btnCerrar, BorderLayout.SOUTH);

        // Cargar los préstamos activos
        try {
            List<Prestamo> prestamos = prestamoDAO.getPrestamosActivos();
            for (Prestamo prestamo : prestamos) {
                Object[] row = {
                        prestamo.getIdPrestamo(),
                        prestamo.getIdUsuario() + " - " + getNombreUsuario(prestamo.getIdUsuario()),
                        prestamo.getISBN() + " - " + getTituloLibro(prestamo.getISBN()),
                        prestamo.getFechaPrestamo()
                };
                model.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(dialog, "Error al cargar préstamos activos: " + ex.getMessage());
        }

        dialog.add(panel);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnPrestamosActivosActionPerformed

    private void btnHistorialActionPerformed(java.awt.event.ActionEvent evt) {
        JDialog dialog = new JDialog(this, "Consultar Historial", true);
        dialog.setSize(800, 600); // Increased size to accommodate the table
        dialog.setLocationRelativeTo(this);

        // Create a panel with BorderLayout to hold all components
        JPanel panel = new JPanel(new BorderLayout());
        GridBagLayout layout = new GridBagLayout();
        JPanel inputPanel = new JPanel(layout);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Create input components
        JComboBox<String> cmbCriterio = new JComboBox<>(new String[]{"id_usuario", "ISBN"});
        JTextField txtValor = new JTextField(20);

        gbc.gridx = 0;
        gbc.gridy = 0;
        inputPanel.add(new JLabel("Criterio:"), gbc);
        gbc.gridx = 1;
        inputPanel.add(cmbCriterio, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        inputPanel.add(new JLabel("Valor:"), gbc);
        gbc.gridx = 1;
        inputPanel.add(txtValor, gbc);

        // Create table for displaying history
        DefaultTableModel historyTableModel = new DefaultTableModel(
                new Object[]{"ID Préstamo", "Usuario", "Libro", "Fecha Préstamo", "Fecha Devolución"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make the table non-editable
            }
        };
        JTable historyTable = new JTable(historyTableModel);
        historyTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scrollPane = new JScrollPane(historyTable);

        // Adjust column widths
        historyTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        historyTable.getColumnModel().getColumn(1).setPreferredWidth(150);
        historyTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        historyTable.getColumnModel().getColumn(3).setPreferredWidth(150);
        historyTable.getColumnModel().getColumn(4).setPreferredWidth(150);

        // Create buttons
        JButton btnBuscar = new JButton("Buscar");
        JButton btnCancel = new JButton("Cancelar");

        btnBuscar.addActionListener(e -> {
            try {
                String criterio = (String) cmbCriterio.getSelectedItem();
                String valor = txtValor.getText().trim();
                historyTableModel.setRowCount(0); // Clear previous results
                List<Prestamo> prestamos = prestamoDAO.getHistorialPrestamos(criterio, valor);
                for (Prestamo prestamo : prestamos) {
                    Object[] row = {
                            prestamo.getIdPrestamo(),
                            prestamo.getIdUsuario() + " - " + getNombreUsuario(prestamo.getIdUsuario()),
                            prestamo.getISBN() + " - " + getTituloLibro(prestamo.getISBN()),
                            prestamo.getFechaPrestamo(),
                            prestamo.getFechaDevolucion()
                    };
                    historyTableModel.addRow(row);
                }
                if (prestamos.isEmpty()) {
                    JOptionPane.showMessageDialog(dialog, "No se encontraron préstamos para el criterio especificado.");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error al consultar historial: " + ex.getMessage());
            }
        });

        btnCancel.addActionListener(e -> dialog.dispose());

        // Add buttons to a panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(btnBuscar);
        buttonPanel.add(btnCancel);

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        inputPanel.add(buttonPanel, gbc);

        // Add components to the main panel
        panel.add(inputPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);

        dialog.add(panel);
        dialog.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new frmPrestamos().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDevolucion;
    private javax.swing.JButton btnHistorial;
    private javax.swing.JButton btnPrestamosActivos;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbtPrestamos;
    // End of variables declaration//GEN-END:variables

    private void setupTable() {
        String[] columnNames = {"ID Préstamo", "Usuario", "Libro", "Fecha Préstamo", "Fecha Devolución"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer la tabla no editable
            }
        };
        tbtPrestamos.setModel(tableModel);
        tbtPrestamos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // Ajustar ancho de columnas
        tbtPrestamos.getColumnModel().getColumn(0).setPreferredWidth(80);
        tbtPrestamos.getColumnModel().getColumn(1).setPreferredWidth(150);
        tbtPrestamos.getColumnModel().getColumn(2).setPreferredWidth(200);

        tbtPrestamos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                btnDevolucion.setEnabled(tbtPrestamos.getSelectedRow() != -1);
            }
        });
    }

    private void loadPrestamosActivos() {
        try {
            tableModel.setRowCount(0);
            List<Prestamo> prestamos = prestamoDAO.getPrestamosActivos();
            for (Prestamo prestamo : prestamos) {
                Object[] row = {
                        prestamo.getIdPrestamo(),
                        prestamo.getIdUsuario() + " - " + getNombreUsuario(prestamo.getIdUsuario()),
                        prestamo.getISBN() + " - " + getTituloLibro(prestamo.getISBN()),
                        prestamo.getFechaPrestamo(),
                        prestamo.getFechaDevolucion()
                };
                tableModel.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar préstamos activos: " + ex.getMessage());
        }
    }

    private String getNombreUsuario(int idUsuario) throws SQLException {
        List<Usuario> usuarios = prestamoDAO.getAllUsuarios();
        return usuarios.stream()
                .filter(u -> u.getIdUsuario() == idUsuario)
                .findFirst()
                .map(u -> u.getNombre() + " " + u.getApellido())
                .orElse("Desconocido");
    }

    private String getTituloLibro(String ISBN) throws SQLException {
        List<Libro> libros = prestamoDAO.getAllLibros();
        return libros.stream()
                .filter(l -> l.getISBN().equals(ISBN))
                .findFirst()
                .map(Libro::getTitulo)
                .orElse("Desconocido");
    }

    private String[] getUsuarios() {
        try {
            List<Usuario> usuarios = prestamoDAO.getAllUsuarios();
            return usuarios.stream()
                    .map(u -> u.getIdUsuario() + " - " + u.getNombre() + " " + u.getApellido())
                    .toArray(String[]::new);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar usuarios: " + ex.getMessage());
            return new String[]{};
        }
    }

    private int[] getUsuariosIds() {
        try {
            List<Usuario> usuarios = prestamoDAO.getAllUsuarios();
            return usuarios.stream().mapToInt(Usuario::getIdUsuario).toArray();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar usuarios: " + ex.getMessage());
            return new int[]{};
        }
    }

    private String[] getLibros() {
        try {
            List<Libro> libros = prestamoDAO.getAllLibros();
            return libros.stream()
                    .map(l -> l.getISBN() + " - " + l.getTitulo())
                    .toArray(String[]::new);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar libros: " + ex.getMessage());
            return new String[]{};
        }
    }

    private String[] getLibrosIsbns() {
        try {
            List<Libro> libros = prestamoDAO.getAllLibros();
            return libros.stream().map(Libro::getISBN).toArray(String[]::new);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar libros: " + ex.getMessage());
            return new String[]{};
        }
    }
}