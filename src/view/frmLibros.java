package view;
import javax.swing.JDialog;
import controller.LibroDAO;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Autor;
import model.Libro;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.stream.Collectors;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.Categoria;
import model.Editorial;

/**
 *
 * @author jose
 */
public class frmLibros extends javax.swing.JFrame {
    private LibroDAO libroDAO;
    private DefaultTableModel tableModel;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(frmLibros.class.getName());

    /**
     * Creates new form frmLibros
     */
    public frmLibros() {
        initComponents();
        this.setTitle("Gestion de libros");
        this.setLocationRelativeTo(null);
        libroDAO = new LibroDAO();
        setupTable();
        loadBooks();
        setupSearchField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbtLibros = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtBuscarLibro = new javax.swing.JTextField();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnListar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbtLibros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jScrollPane1.setViewportView(tbtLibros);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jLabel1.setText("Buscar:");

        txtBuscarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarLibroActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(19, 19, 19))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addGap(68, 68, 68)
                                                                .addComponent(btnAgregar)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(btnModificar))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(txtBuscarLibro, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addComponent(btnBuscar)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(btnListar))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(28, 28, 28)
                                                                .addComponent(btnEliminar)))))
                                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnBuscar)
                                        .addComponent(jLabel1)
                                        .addComponent(txtBuscarLibro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnListar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnAgregar)
                                        .addComponent(btnModificar)
                                        .addComponent(btnEliminar))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarLibroActionPerformed
        filterTable();
    }//GEN-LAST:event_txtBuscarLibroActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        filterTable();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        JDialog dialog = new JDialog(this, "Agregar Libro", true);
        dialog.setSize(450, 350);
        dialog.setLocationRelativeTo(this);

        // Use GridBagLayout for better control over component placement
        GridBagLayout layout = new GridBagLayout();
        dialog.setLayout(layout);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Initialize input fields with fixed width
        JTextField txtISBN = new JTextField(20);
        JTextField txtTitulo = new JTextField(20);
        JComboBox<String> cmbEditorial = new JComboBox<>(getEditoriales());
        JTextField txtAnio = new JTextField(20);
        JComboBox<String> cmbCategoria = new JComboBox<>(getCategorias());
        JTextField txtAutores = new JTextField(20);

        // Add components with proper alignment
        gbc.gridx = 0;
        gbc.gridy = 0;
        dialog.add(new JLabel("ISBN:"), gbc);
        gbc.gridx = 1;
        dialog.add(txtISBN, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        dialog.add(new JLabel("Título:"), gbc);
        gbc.gridx = 1;
        dialog.add(txtTitulo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        dialog.add(new JLabel("Editorial:"), gbc);
        gbc.gridx = 1;
        dialog.add(cmbEditorial, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        dialog.add(new JLabel("Año Publicación:"), gbc);
        gbc.gridx = 1;
        dialog.add(txtAnio, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        dialog.add(new JLabel("Categoría:"), gbc);
        gbc.gridx = 1;
        dialog.add(cmbCategoria, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        dialog.add(new JLabel("Autores (ID separados por coma):"), gbc);
        gbc.gridx = 1;
        dialog.add(txtAutores, gbc);

        // Button panel
        JPanel buttonPanel = new JPanel();
        JButton btnSave = new JButton("Guardar");
        JButton btnCancel = new JButton("Cancelar");

        btnSave.addActionListener(e -> {
            try {
                // Input validation
                if (txtISBN.getText().trim().isEmpty() || txtTitulo.getText().trim().isEmpty() ||
                        txtAnio.getText().trim().isEmpty() || txtAutores.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(dialog, "Por favor, complete todos los campos obligatorios");
                    return;
                }

                // Validate year format
                int anio;
                try {
                    anio = Integer.parseInt(txtAnio.getText().trim());
                    if (anio < 1000 || anio > java.time.Year.now().getValue()) {
                        JOptionPane.showMessageDialog(dialog, "Por favor, ingrese un año válido");
                        return;
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(dialog, "El año debe ser un número válido");
                    return;
                }

                // Validate author IDs
                List<Autor> autores = new ArrayList<>();
                String[] autorIds = txtAutores.getText().split(",");
                for (String id : autorIds) {
                    try {
                        Autor autor = new Autor();
                        autor.setIdAutor(Integer.parseInt(id.trim()));
                        autores.add(autor);
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(dialog, "Los IDs de autores deben ser números válidos");
                        return;
                    }
                }

                Libro libro = new Libro(
                        txtISBN.getText().trim(),
                        txtTitulo.getText().trim(),
                        cmbEditorial.getSelectedIndex() + 1, // Assuming IDs start from 1
                        anio,
                        cmbCategoria.getSelectedIndex() + 1, // Assuming IDs start from 1
                        autores
                );

                libroDAO.agregarLibro(libro);
                loadBooks();
                dialog.dispose();
                JOptionPane.showMessageDialog(this, "Libro agregado exitosamente");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error al agregar libro: " + ex.getMessage());
            }
        });

        btnCancel.addActionListener(e -> dialog.dispose());

        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 2;
        dialog.add(buttonPanel, gbc);

        dialog.setVisible(true);
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        int selectedRow = tbtLibros.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un libro para modificar");
            return;
        }

        String isbn = (String) tableModel.getValueAt(selectedRow, 0);
        String titulo = (String) tableModel.getValueAt(selectedRow, 1);
        String anio = tableModel.getValueAt(selectedRow, 2).toString();
        String editorial = tableModel.getValueAt(selectedRow, 3).toString();
        String categoria = tableModel.getValueAt(selectedRow, 4).toString();
        String autores = (String) tableModel.getValueAt(selectedRow, 5);

        JDialog dialog = new JDialog(this, "Modificar Libro", true);
        dialog.setSize(450, 350);
        dialog.setLocationRelativeTo(this);

        GridBagLayout layout = new GridBagLayout();
        dialog.setLayout(layout);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JTextField txtISBN = new JTextField(isbn, 20);
        txtISBN.setEnabled(false);
        JTextField txtTitulo = new JTextField(titulo, 20);
        JComboBox<String> cmbEditorial = new JComboBox<>(getEditoriales());
        try {
            int editorialIndex = Integer.parseInt(editorial) - 1;
            if (editorialIndex >= 0 && editorialIndex < cmbEditorial.getItemCount()) {
                cmbEditorial.setSelectedIndex(editorialIndex);
            }
        } catch (NumberFormatException ex) {
            // Handle case where editorial is not a number
            cmbEditorial.setSelectedIndex(0);
        }
        JTextField txtAnio = new JTextField(anio, 20);
        JComboBox<String> cmbCategoria = new JComboBox<>(getCategorias());
        try {
            int categoriaIndex = Integer.parseInt(categoria) - 1;
            if (categoriaIndex >= 0 && categoriaIndex < cmbCategoria.getItemCount()) {
                cmbCategoria.setSelectedIndex(categoriaIndex);
            }
        } catch (NumberFormatException ex) {
            // Handle case where categoria is not a number
            cmbCategoria.setSelectedIndex(0);
        }
        JTextField txtAutores = new JTextField(autores, 20);

        gbc.gridx = 0;
        gbc.gridy = 0;
        dialog.add(new JLabel("ISBN:"), gbc);
        gbc.gridx = 1;
        dialog.add(txtISBN, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        dialog.add(new JLabel("Título:"), gbc);
        gbc.gridx = 1;
        dialog.add(txtTitulo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        dialog.add(new JLabel("Editorial:"), gbc);
        gbc.gridx = 1;
        dialog.add(cmbEditorial, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        dialog.add(new JLabel("Año Publicación:"), gbc);
        gbc.gridx = 1;
        dialog.add(txtAnio, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        dialog.add(new JLabel("Categoría:"), gbc);
        gbc.gridx = 1;
        dialog.add(cmbCategoria, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        dialog.add(new JLabel("Autores (ID separados por coma):"), gbc);
        gbc.gridx = 1;
        dialog.add(txtAutores, gbc);

        JPanel buttonPanel = new JPanel();
        JButton btnSave = new JButton("Guardar");
        JButton btnCancel = new JButton("Cancelar");

        btnSave.addActionListener(e -> {
            try {
                if (txtTitulo.getText().trim().isEmpty() || txtAnio.getText().trim().isEmpty() ||
                        txtAutores.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(dialog, "Por favor, complete todos los campos obligatorios");
                    return;
                }

                int anioValue;
                try {
                    anioValue = Integer.parseInt(txtAnio.getText().trim());
                    if (anioValue < 1000 || anioValue > java.time.Year.now().getValue()) {
                        JOptionPane.showMessageDialog(dialog, "Por favor, ingrese un año válido");
                        return;
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(dialog, "El año debe ser un número válido");
                    return;
                }

                List<Autor> autoresList = new ArrayList<>();
                String[] autorIds = txtAutores.getText().split(",");
                for (String id : autorIds) {
                    try {
                        Autor autor = new Autor();
                        autor.setIdAutor(Integer.parseInt(id.trim()));
                        autoresList.add(autor);
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(dialog, "Los IDs de autores deben ser números válidos");
                        return;
                    }
                }

                Libro libro = new Libro(
                        txtISBN.getText(),
                        txtTitulo.getText().trim(),
                        cmbEditorial.getSelectedIndex() + 1,
                        anioValue,
                        cmbCategoria.getSelectedIndex() + 1,
                        autoresList
                );

                libroDAO.modificarLibro(libro);
                loadBooks();
                dialog.dispose();
                JOptionPane.showMessageDialog(this, "Libro modificado exitosamente");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error al modificar libro: " + ex.getMessage());
            }
        });

        btnCancel.addActionListener(e -> dialog.dispose());

        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);

        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 2;
        dialog.add(buttonPanel, gbc);

        dialog.setVisible(true);
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tbtLibros.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un libro para eliminar");
            return;
        }

        String isbn = (String) tableModel.getValueAt(selectedRow, 0);

        int confirm = JOptionPane.showConfirmDialog(this,
                "¿Está seguro de eliminar el libro con ISBN " + isbn + "?",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                boolean deleted = libroDAO.eliminarLibro(isbn);
                if (deleted) {
                    loadBooks();
                    JOptionPane.showMessageDialog(this, "Libro eliminado exitosamente");
                } else {
                    JOptionPane.showMessageDialog(this,
                            "No se puede eliminar el libro porque tiene préstamos asociados.\n" +
                                    "Elimine primero los préstamos relacionados con este libro.",
                            "Error al eliminar",
                            JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Error al eliminar libro: " + ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        loadBooks();
    }//GEN-LAST:event_btnListarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new frmLibros().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbtLibros;
    private javax.swing.JTextField txtBuscarLibro;
    // End of variables declaration//GEN-END:variables

    private void setupTable() {
        String[] columnNames = {"ISBN", "Título", "Año", "Editorial", "Categoría", "Autores"};
        tableModel = new DefaultTableModel(columnNames, 0);
        tbtLibros.setModel(tableModel);
        tbtLibros.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tbtLibros.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                btnModificar.setEnabled(tbtLibros.getSelectedRow() != -1);
                btnEliminar.setEnabled(tbtLibros.getSelectedRow() != -1);
            }
        });
    }

    private void loadBooks() {
        try {
            tableModel.setRowCount(0);
            List<Libro> libros = libroDAO.buscarLibros("titulo", "");
            for (Libro libro : libros) {
                String autores = libro.getAutores().stream()
                        .map(Autor::getNombre)
                        .collect(Collectors.joining(", "));
                Object[] row = {
                        libro.getISBN(),
                        libro.getTitulo(),
                        libro.getAnioPublicacion(),
                        libro.getIdEditorial(),
                        libro.getIdCategoria(),
                        autores
                };
                tableModel.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar libros: " + ex.getMessage());
        }
    }

    private void setupSearchField() {
        txtBuscarLibro.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filterTable();
            }
        });
    }

    private void filterTable() {
        String searchText = txtBuscarLibro.getText().trim();
        try {
            tableModel.setRowCount(0);
            List<Libro> libros = libroDAO.buscarLibros("ISBN", searchText);
            for (Libro libro : libros) {
                String autores = libro.getAutores().stream()
                        .map(Autor::getNombre)
                        .collect(Collectors.joining(", "));
                Object[] row = {
                        libro.getISBN(),
                        libro.getTitulo(),
                        libro.getAnioPublicacion(),
                        libro.getIdEditorial(),
                        libro.getIdCategoria(),
                        autores
                };
                tableModel.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al buscar libros: " + ex.getMessage());
        }
    }

    private String[] getEditoriales() {
        try {
            List<Editorial> editoriales = libroDAO.getAllEditoriales();
            return editoriales.stream().map(Editorial::getNombre).toArray(String[]::new);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar editoriales: " + ex.getMessage());
            return new String[]{"Editorial 1", "Editorial 2", "Editorial 3"};
        }
    }

    private String[] getCategorias() {
        try {
            List<Categoria> categorias = libroDAO.getAllCategorias();
            return categorias.stream().map(Categoria::getNombre).toArray(String[]::new);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar categorías: " + ex.getMessage());
            return new String[]{"Ficción", "No Ficción", "Ciencia", "Historia"};
        }
    }
}